cmake_minimum_required(VERSION 3.10)
project(LaueMatching VERSION 1.0.0 LANGUAGES C)

# Set C standard
set(CMAKE_C_STANDARD 99)
set(CMAKE_C_STANDARD_REQUIRED ON)

# Include check for header files
include(CheckIncludeFile)
CHECK_INCLUDE_FILE("stdio.h" HAVE_STDIO_H)
CHECK_INCLUDE_FILE("stdlib.h" HAVE_STDLIB_H)
CHECK_INCLUDE_FILE("string.h" HAVE_STRING_H)
CHECK_INCLUDE_FILE("stdint.h" HAVE_STDINT_H)
CHECK_INCLUDE_FILE("stddef.h" HAVE_STDDEF_H)
CHECK_INCLUDE_FILE("stdbool.h" HAVE_STDBOOL_H)
CHECK_INCLUDE_FILE("math.h" HAVE_MATH_H)
CHECK_INCLUDE_FILE("time.h" HAVE_TIME_H)
CHECK_INCLUDE_FILE("sys/mman.h" HAVE_SYS_MMAN_H)
CHECK_INCLUDE_FILE("fcntl.h" HAVE_FCNTL_H)
CHECK_INCLUDE_FILE("unistd.h" HAVE_UNISTD_H)

# Ensure we have all required headers
if(NOT HAVE_STDIO_H OR NOT HAVE_STDLIB_H OR NOT HAVE_STRING_H OR 
   NOT HAVE_STDINT_H OR NOT HAVE_STDDEF_H OR NOT HAVE_MATH_H)
  message(FATAL_ERROR "Missing required standard headers")
endif()

# Find OpenMP
find_package(OpenMP REQUIRED)

# Handle NLopt dependency
option(DOWNLOAD_NLOPT "Download and build NLopt if not found" ON)
find_package(NLopt QUIET)

if(NOT NLopt_FOUND AND DOWNLOAD_NLOPT)
    include(ExternalProject)
    set(NLOPT_VERSION "2.7.1")
    set(NLOPT_URL "https://github.com/stevengj/nlopt/archive/v${NLOPT_VERSION}.tar.gz")
    set(NLOPT_INSTALL_DIR "${CMAKE_BINARY_DIR}/nlopt-install")
    
    message(STATUS "NLopt not found. Downloading and building NLopt ${NLOPT_VERSION}...")
    
    ExternalProject_Add(nlopt_external
        URL ${NLOPT_URL}
        CMAKE_ARGS
            -DCMAKE_INSTALL_PREFIX=${NLOPT_INSTALL_DIR}
            -DCMAKE_BUILD_TYPE=Release
            -DBUILD_SHARED_LIBS=ON
            -DNLOPT_PYTHON=OFF
            -DNLOPT_OCTAVE=OFF
            -DNLOPT_MATLAB=OFF
            -DNLOPT_GUILE=OFF
            -DNLOPT_SWIG=OFF
        PREFIX "${CMAKE_BINARY_DIR}/nlopt-prefix"
        BUILD_BYPRODUCTS
            "${NLOPT_INSTALL_DIR}/lib/libnlopt${CMAKE_SHARED_LIBRARY_SUFFIX}"
            "${NLOPT_INSTALL_DIR}/lib/libnlopt.a"
    )
    
    set(NLOPT_INCLUDE_DIRS "${NLOPT_INSTALL_DIR}/include")
    if(WIN32)
        set(NLOPT_LIBRARIES "${NLOPT_INSTALL_DIR}/lib/nlopt.lib")
    else()
        set(NLOPT_LIBRARIES "${NLOPT_INSTALL_DIR}/lib/libnlopt${CMAKE_SHARED_LIBRARY_SUFFIX}")
    endif()
    
    include_directories(${NLOPT_INCLUDE_DIRS})
    
    # Create imported target for NLopt
    add_library(nlopt SHARED IMPORTED)
    set_target_properties(nlopt PROPERTIES
        IMPORTED_LOCATION ${NLOPT_LIBRARIES}
        INTERFACE_INCLUDE_DIRECTORIES ${NLOPT_INCLUDE_DIRS}
    )
    add_dependencies(nlopt nlopt_external)
    
elseif(NOT NLopt_FOUND AND NOT DOWNLOAD_NLOPT)
    message(FATAL_ERROR "NLopt not found and DOWNLOAD_NLOPT is OFF. Please install NLopt manually.")
endif()

# Collect source files
file(GLOB_RECURSE SOURCES "src/*.c")

# Create executable directly
add_executable(LaueMatchingCPU ${SOURCES} main.c)

# Include directories
target_include_directories(LaueMatchingCPU PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})

# Link dependencies
if(NLopt_FOUND)
    target_link_libraries(LaueMatchingCPU PRIVATE OpenMP::OpenMP_C NLopt::nlopt m)
else()
    target_link_libraries(LaueMatchingCPU PRIVATE OpenMP::OpenMP_C nlopt m)
    add_dependencies(LaueMatchingCPU nlopt_external)
endif()

# Set compiler flags
target_compile_options(LaueMatchingCPU PRIVATE 
    -Wall 
    -Wextra 
    -O3
)

# Optional: Also build a library version
option(BUILD_LIBRARY "Build shared library" OFF)

if(BUILD_LIBRARY)
    # Create shared library
    add_library(laue_matching SHARED ${SOURCES})
    
    # Add library build definition
    target_compile_definitions(laue_matching PRIVATE BUILD_LIBRARY)
    
    # Include directories
    target_include_directories(laue_matching 
        PUBLIC 
            $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
            $<INSTALL_INTERFACE:include>
        PRIVATE
            ${CMAKE_CURRENT_SOURCE_DIR}
    )
    
    # Link dependencies
    if(NLopt_FOUND)
        target_link_libraries(laue_matching PRIVATE OpenMP::OpenMP_C NLopt::nlopt m)
    else()
        target_link_libraries(laue_matching PRIVATE OpenMP::OpenMP_C nlopt m)
        add_dependencies(laue_matching nlopt_external)
    endif()
    
    # Set compiler flags
    target_compile_options(laue_matching PRIVATE 
        -Wall 
        -Wextra
        -O3
    )
    
    # Installation rules
    include(GNUInstallDirs)
    install(TARGETS laue_matching
        EXPORT laue_matching-targets
        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
    )
    
    install(DIRECTORY include/
        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/laue_matching
        FILES_MATCHING PATTERN "*.h"
    )
    
    # Export targets
    install(EXPORT laue_matching-targets
        FILE laue_matching-targets.cmake
        NAMESPACE LaueMatching::
        DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/laue_matching
    )
endif()